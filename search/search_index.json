{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Graph Universe Documentation","text":""},{"location":"#what-is-the-graph-universe","title":"What is the Graph Universe?","text":"<p>The graph universe (guv) is a toolset to build a graph data model on top of a relational database model. The main component is a API server with the business logic. Other plugin and connector components can be used to integrate other technologies or extend the features. UI components makes the usage of the graph data user friendly. Client libraries can be used to integrate it into other systems for an hybrid approach.</p>"},{"location":"#content","title":"Content","text":"<ul> <li>Big Picture</li> <li>Quickstart</li> <li>Demo scenario</li> <li>REST API</li> <li>Integration aspects</li> <li>Data model</li> </ul>"},{"location":"clients/","title":"Client libraries","text":""},{"location":"installation/","title":"Installation &amp; configuration","text":"<p>The Graph Universe is available as a docker container. There are multiple options to install it.</p>"},{"location":"installation/#installation-variants","title":"Installation variants","text":"<ol> <li>Docker standalone</li> <li>Docker compose stack</li> <li>SAP Kyma with SAP HANA Cloud </li> </ol>"},{"location":"plugins/","title":"Plugins and Connectors","text":""},{"location":"installation/api_service/","title":"GUB API Service","text":""},{"location":"installation/install_docker_compose/","title":"Installation for Docker Compose","text":"<p>(coming soon)</p>"},{"location":"installation/install_sap_kyma/","title":"Installation for SAP BTP Kyma and HANA Cloud","text":"<p>The Graph Universe (GUV) can be installed on the SAP Business Technology Platform (BTP). The SAP Kyma environment is a Kubernetes (K8S) environment within the SAP BTP. As a persistence layer the SAP HANA Cloud database can be used. </p> <p>The required installation steps are described here.</p>"},{"location":"installation/install_sap_kyma/#prerequisites","title":"Prerequisites","text":"<p>The following components are required:</p> <ol> <li>SAP BTP account</li> <li>SAP Kyma Cluster</li> <li>SAP HANA Cloud Instance</li> </ol> <p>You can get a trial acess for free. See the SAP Developer Tutorials and search for \"Kyma\" and \"HANA\".</p>"},{"location":"installation/install_sap_kyma/#check-the-hana-database","title":"Check the HANA database","text":"<p>Login to your SAP BTP subaccount and select \"Instances and Subscriptions\". You should find an installed \"SAP HANA Cloud\" Application. </p> <p></p> <p>Enter the \"HANA Cloud Central\" Cockpit by selecting the \"SAP HANA Cloud\" application.</p> <p>.</p> <p>Enter the context menu via \"Action\" and select \"Copy SQL Endpoint\". </p> <p>Your copied endpoint should be like this:</p> <p><code>0cf183xx-xxxa-xx71-83xx-5ff37xxx324.hana.trial-us10.hanacloud.ondemand.com:443</code></p> <p>Check the DB user and password to access this instance.  </p>"},{"location":"installation/install_sap_kyma/#prepare-the-kyma-cluster","title":"Prepare the Kyma cluster","text":"<p>Go to your SAP BTP subaccount \"Overview\" and check the \"Kyma Environment\". </p> <p></p> <p>Select the \"Link to dashboard\".</p> <p></p>"},{"location":"installation/install_sap_kyma/#create-a-namespace","title":"Create a namespace","text":"<p>Select <code>Namespaces</code> and <code>Create</code>. </p> <p></p> <p>Switch to the \"Form\" view. Enter a valid name: e.g. <code>guv-demo</code> and confirm with <code>Create</code>. </p> <p></p> <p>A new Kyma namespace is visible and You will see an empty dashboard.</p> <p></p>"},{"location":"installation/install_sap_kyma/#create-the-secrets-for-hana","title":"Create the secrets for HANA","text":"<p>In this step You will create a secret for storing the secret connection information to the HANA Cloud database.</p> <p>Enter <code>Configuration</code> and <code>Secret</code>.</p> <p></p> <p>Select <code>Create</code>. </p> <p>Fill the scret form: - select the <code>Form</code> view if not selected - use <code>guv-db</code>as name for the secret - select <code>Type</code> = <code>Opaque</code>  - enter <code>hana://</code> +  as parameter <code>url</code> - enter your DB User as parameter <code>user</code> - e.g. DBADMIN - enter your DB Password as parameter <code>password</code> <p></p> <p>Select <code>Create</code>.</p>"},{"location":"installation/install_sap_kyma/#create-deployment","title":"Create deployment","text":"<p>In this step the required kubernetes artifacts are created by a complex yaml file. </p> <p>Enter the <code>Namespace Overview</code> and get your cluster id. You will find this at the top.</p> <p></p> <p>Copy the following yaml snippet to the clipboard.</p> <pre><code>kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: guv-srv-data\n  labels:\n    app: guv\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Mi\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: guv-api\n  labels:\n    app: guv\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: guv\n  template:\n    metadata:\n      labels:\n        app: guv\n    spec:\n      terminationGracePeriodSeconds: 10\n      containers:\n        - name: guv-api\n          image: ghcr.io/b-tocs/btocs_guvapi\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8000\n          env:\n            - name: SERVER_ROLE\n              value: \"demo\"\n            - name: PYTHONUNBUFFERED\n              value: \"1\"\n            - name: B2X_RESTAPI_CORS_ENABLED\n              value: \"true\"\n            - name: B2X_RESTAPI_CORS_HOSTS\n              value: '[\"*\"]'\n            - name: B2X_RESTAPI_CORS_METHODS\n              value: '[\"*\"]'\n            - name: B2X_RESTAPI_CORS_HEADERS\n              value: '[\"*\"]'\n            - name: B2X_REDIS_DEFAULT_HOST\n              value: guv-kvc\n            - name: DB_CONNECT_URL\n              valueFrom:\n                secretKeyRef:\n                  name: guv-db\n                  key: url\n            - name: DB_USER\n              valueFrom:\n                secretKeyRef:\n                  name: guv-db\n                  key: user\n            - name: DB_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: guv-db\n                  key: password\n          volumeMounts:\n            - name: guv-srv-data\n              mountPath: /data\n      volumes:\n        - name: guv-srv-data\n          persistentVolumeClaim:\n            claimName: guv-srv-data\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: guv-api\n  labels:\n    app: guv\nspec:\n  selector:\n    app: guv\n  ports:\n    - protocol: TCP\n      port: 8000\n      targetPort: 8000\n\n---\napiVersion: gateway.kyma-project.io/v1beta1\nkind: APIRule\nmetadata:\n  labels:\n    app.kubernetes.io/name: guv-demo-api\n  name: guv-demo-api\n  namespace: guv-demo\nspec:\n  gateway: kyma-system/kyma-gateway\n  host: guv-demo-api.&lt;your cluster&gt;.kyma.ondemand.com\n  rules:\n    - accessStrategies:\n        - handler: no_auth\n      methods:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n        - PATCH\n        - HEAD\n        - OPTIONS\n        - CONNECT\n        - TRACE\n      path: /.*\n  service:\n    name: guv-api\n    port: 8000\n</code></pre> <p>Select the button <code>Upload YAML</code> and insert the clipboard at the left text area.</p> <p></p> <p>Change the text <code>your cluster id</code> with the id of your cluster: e.g. <code>a12345678</code>. </p> <p>Tip: You will find this id in the url of the current Kyma dashboard view too.</p> <p>Push the <code>Upload</code> button now. You should get a success information.</p> <p></p> <p>Close the popup.</p>"},{"location":"installation/install_sap_kyma/#check-the-guv-api-service","title":"Check the GUV API Service","text":"<p>Go to <code>Discovery and Network</code> and select <code>API Rules</code>. A new created rule <code>guv-demo-api</code> should be displayed. Select this rule.</p> <p></p> <p>You will find the endpoint URL of the GUV API service in <code>Metadata</code> -&gt; `host'. Select this URL. A local brower should be opened and You will see this output.</p> <p></p> <p>Append a <code>/info</code> the the URL and You will get a detailed information.</p> <p></p>"},{"location":"installation/install_sap_kyma/#conclusion-and-further-information","title":"Conclusion and further information","text":"<p>With these steps you have installed an GUV API service on top of an SAP HANA Cloud database within an kubernetes environment for demo purposes. </p>"},{"location":"installation/install_sap_kyma/#scalability","title":"Scalability","text":"<p>The service runs with 5 replicas to demonstrate the scalabilty. You can modify this by changing the deployment <code>guv-api</code>.</p>"},{"location":"installation/install_sap_kyma/#configuration","title":"Configuration","text":"<p>The service can be configured by environment variables. This can be done by changing the deployment.</p>"},{"location":"installation/install_sap_kyma/#security","title":"Security","text":"<p>The demo service is configured unsecure by default and will be configured by environment variables. See the documentation for the GUV API Service.  </p> <p>You can add SAP BTP security options by changing the api rule.</p>"},{"location":"installation/install_sap_kyma/#additional-services","title":"Additional services","text":"<p>The GUV API Service can be enhanced by other services in the same namespace like REDIS as Cache, AI or eventing services. See the corresponding documentation and add deployments to your namespace. </p>"},{"location":"overview/big_picture/","title":"Graph Universe Big Picture","text":"<p>The graph universe is a API layer on top of an SQL database to serve a low code graph environment. The main idea is to use this as a \"Data Universe\" - a graph based data storage for different usecases. </p> <p>The graph API (aka GUV API) is docker based and can be called via an OpenAPI REST API. There are client libraries for SAP ABAP and Python available.</p> <pre><code>flowchart TD\n    API[GUV API] --&gt;DB[(SQL Database)]\n\n</code></pre>"}]}